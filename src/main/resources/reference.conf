
# All application settings except for default dependent library settings like Akka.
application {

  # MQTT broker connection settings.
  mqttBroker {

    protocol = "tcp"

    hostname = "localhost"

    port = 1883

    url = ${application.mqttBroker.protocol}"://"${application.mqttBroker.hostname}":"${application.mqttBroker.port}

    userName = ""

    password = ""

    stashTimeToLive = 1 minute
    stashCapacity = 8000
    reconnectDelayMin = 10 ms
    reconnectDelayMax = 10 seconds
  }

  # MongoDB connectivity settings
  mongo {
    # Host on which you can find Mongo server, if sharding/replication is used multiple hosts can be defined here later.
    host = "localhost"

    # Mongo port to connect  (default 27017)
    port = 27017

    # Database name to use. No schema configuration is required.
    dbName = "mqtt"

    # mongodb://[username:password@]host1[:port1][,...hostN[:portN]][/[defaultauthdb][?options]]
    uri = "mongodb://"${application.mongo.host}":"${application.mongo.port}
  }

  # Defines how to save MQTT messages to MongoDB
  mqttMongo {

    # Each topic can be saved to one or more collections. The service will subscribe to all listed topics and
    # save them to corresponding collections.
    # Example:
    # [ { "topic1" : "collection_name1" }, { "topic2" : "collection_name2;collection_name3" } ]
    # use ';' to separate multiple collections for one topic
    topicsToCollectionsMappings = [{
      "test": "messages"
    }]

    # A conversion format to be used when saving MQTT messages to Mongo DB.
    # Default format is "JSON".
    # Available options:
    #  * JSON - try to convert message payload to JSON and save it as it is. If conversion
    #    fails save it in "payload" field as String.
    #  * BINARY - save message payload in "payload" field as it is (bytes).
    #  * STRING - save message payload as String in "payload".
    serializationFormat = "JSON"

    # All documents will be saved under this root field, i.e.: {"data": "some data"}
    # You can change it to something shorter.
    payloadField = "data"

  }

}

# AKKA configuration:
akka {
  # for debugging Akka config
  log-config-on-start = off

  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  # Options: ERROR, WARNING, INFO, DEBUG
  loglevel = INFO

  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
    }
  }

  log-dead-letters = off
  log-dead-letters-during-shutdown = off
}
